<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Mason Chu</title>
    <link>https://masonchu.github.io/</link>
    <description>Recent content in Home on Mason Chu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Mon, 25 Jun 2018 14:54:21 +0800</lastBuildDate>
    
	<atom:link href="https://masonchu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 GVM 管理 go 版本</title>
      <link>https://masonchu.github.io/golang/gvm-go-version/</link>
      <pubDate>Mon, 25 Jun 2018 14:54:21 +0800</pubDate>
      
      <guid>https://masonchu.github.io/golang/gvm-go-version/</guid>
      <description>基本介紹 GVM 是一套管理 golang 版本的套件，類似於 nodeJS / nvm。
安裝 GVM bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)  安裝之後應該會在 bashrc 下加入 source 的指令，如果安裝完還是找不到 gvm 指令就需要檢查一下這塊。
source &amp;quot;/Users/&amp;lt;username&amp;gt;/.gvm/scripts/gvm&amp;quot;  首次使用 GVM 使用 GVM 安裝 Go1.4 與之後版本。go1.4 版本之後使用 go 對自己編譯，因此沒有安裝 go 的狀況下之後的版本都是無法編譯的。
gvm install go1.4 --binary # 直接安裝 binary gvm use go1.4 # 使用 go1.4 的環境 export GOROOTBOOTSTRAP=$GOROOT # 設定 $GOROOTBOOTSTRAP gvm install go1.10.3 # 安裝 Go go1.10.3 Installing go1.10.3...  gvm install go1.</description>
    </item>
    
    <item>
      <title>在本機安裝 Minikube</title>
      <link>https://masonchu.github.io/kubernetes/install-minikube-locally/</link>
      <pubDate>Tue, 03 Jul 2018 09:56:18 +0800</pubDate>
      
      <guid>https://masonchu.github.io/kubernetes/install-minikube-locally/</guid>
      <description>minikube 是 kubernetes 社群推出的的一個輕量型工具，用於在本地端建置模擬 kubernetes 功能。minikube 支援以下幾種 vm driver。
 virtualbox(預設值) vmwarefusion kvm2 kvm hyperkit   後續內容預設使用 macOS + virtualbox。
 安裝 VM 安裝 kubectl brew install kubernetes-cli  確定安裝版本
kubectl version   如果還沒有啟動 Minikube 這時候會出現 The connection to the server localhost:8080 was refused 的訊息。
 安裝 minikube curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.0/minikube-darwin-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo mv minikube /usr/local/bin/  也可以使用 homebrew 安裝
brew cask install minikube  啟動 minikube minikube start   如果是第一次啟動，這時候會自動下載 Minikube ISO &amp;amp; kubelet &amp;amp; kubeadm</description>
    </item>
    
    <item>
      <title>安裝和啟用 NSQ 服務</title>
      <link>https://masonchu.github.io/microservices/install-and-start-nsq/</link>
      <pubDate>Thu, 21 Jun 2018 15:53:16 +0800</pubDate>
      
      <guid>https://masonchu.github.io/microservices/install-and-start-nsq/</guid>
      <description>安裝 NSQ 在本機測試環境 NSQ 本身有提供 brew / docker 版本。在這邊我是直接使用 github 原始碼下載編譯，注意 golang 1.7+ 並且已經有 dep 套件管理。在 test.sh 會執行 golang test &amp;amp; 編譯出所有的可執行檔。
下載 source code &amp;amp; 安裝相依性套件 git clone https://github.com/nsqio/nsq $GOPATH/src/github.com/nsqio/nsq cd $GOPATH/src/github.com/nsqio/nsq dep ensure  測試 &amp;amp; 編譯 ./test.sh  安裝 NSQ 安裝至 /usr/local/bin 目錄
make install  依序啟動服務 nsqlookupd 預設監聽 http:4161 / tcp:4160，而 nsqd 啟動時自動到 nsqlookupd 註冊。
nsqlookupd nsqd --lookupd-tcp-address=127.0.0.1:4160 nsqadmin --lookupd-http-address=127.0.0.1:4161  使用 go-nsq 發布與接受訊息 發佈環境配置 使用在 microservices 中時候，nsqd 建議並不是全部 services 共用，而是個別配置一個 localhost 的 nsqd 註冊到 nsqlookupd。</description>
    </item>
    
    <item>
      <title>從 dep 轉換到 vgo</title>
      <link>https://masonchu.github.io/golang/dep-to-vgo-issue/</link>
      <pubDate>Wed, 01 Aug 2018 15:48:37 +0800</pubDate>
      
      <guid>https://masonchu.github.io/golang/dep-to-vgo-issue/</guid>
      <description>在 go1.11 之後，vgo 會直接加入 go 官方套件管理工具，在正式釋出之前遇到一些小問題。
vscode gopkgs 支援 如果是使用 Microsoft/vscode-go 套件在 vscode 下開發的話，使用 vgo 之後移除 vendor 套件，會發現專案內 go import 出現找不到路徑的錯誤，這是由於 vscode-go 使用的 toolchain 還沒有更新的問題。立即的解法就是直接將 vscode 設定 go.alternateTools 直接改成 vgo 就可以了。
 &amp;quot;go.alternateTools&amp;quot;: { &amp;quot;go&amp;quot;: &amp;quot;vgo&amp;quot; },  exec: &amp;ldquo;clang&amp;rdquo;: executable file not found in $PATH 使用 vgo 啟動出現這個錯誤的話，目前暫時使用
CGO_ENABLED=0 vgo build CC=gcc vgo build  ref http://www.evanlin.com/til-practical-in-vgo/ https://github.com/Microsoft/vscode-go/issues/1532 https://github.com/golang/go/issues/23965</description>
    </item>
    
    <item>
      <title>Cobra 強大的 Golang 命令列工具</title>
      <link>https://masonchu.github.io/golang/golang-cobra/</link>
      <pubDate>Wed, 27 Jun 2018 12:49:40 +0800</pubDate>
      
      <guid>https://masonchu.github.io/golang/golang-cobra/</guid>
      <description>基本介紹 Cobra 是一套可以快速可以快速建立 golang CLI 工具的套件。在 golang 的生態圈內到處都可以看到相關的痕跡。最有名的包含 docker, k8s 都使用 cobra 處理 CLI 介面。
使用方法 安裝 如果已經準備好 go 的環境，只需要執行 go get 就可以將 cobra 加入安裝。
go get -u github.com/spf13/cobra/cobra  建立根命令 cobra init   注意如果目錄下已經有檔案會出現 Cobra will not create a new project in a non empty directory，這時候新開目錄建立之後把全部資料移過來就可以。（需要修改 main.go import 路徑）
 應該會建立以下檔案 + cmd
root.go + main.go
package main func main() { cmd.Execute() }  這時候只要執行 go run main.</description>
    </item>
    
    <item>
      <title>第一次使用 Hugo 就上手</title>
      <link>https://masonchu.github.io/devops/first-hugo/</link>
      <pubDate>Wed, 05 Jul 2017 12:35:25 +0800</pubDate>
      
      <guid>https://masonchu.github.io/devops/first-hugo/</guid>
      <description>基本介紹 Hugo 是一套生成靜態頁面的工具(static site generator)。利用 Markdown 將內容跟樣式外觀完整分開，再利用生成的靜態網頁直接發佈到 server 上。般來說 markdown 語法對應樣式種類會比較少，但是相對的也是幫助在寫作的時候專注在內容而不是樣式上。
與動態的 blog 平台比較 優點  很容易對文章內容進行 git 版控或是多人協作
 生成的靜態網頁瀏覽速度很快，也不需要對 server 系統依賴
 容易互相在同類型的靜態生成工具之間轉換，只要把 markdown 的文章內容帶著走就好了
  缺點  需要熟悉 markdown , git
 通常不會有線上編輯模式或是管理平台
 如果想要取得流量或讀者留言需要註冊其他服務  第一次安裝 如果是 mac OS 只要執行
brew install hugo  就可以直接安裝完成，之後進入選定好儲存檔案的目錄下
hugo new site &amp;lt;SiteName&amp;gt;  就會建立出預設的檔案目錄
建議第一篇 post hugo new post/my-first-post.md  建立後的 md 檔案產生在 content/post 目錄
選擇 Theme 挑選寫作工具 常用指令 // 建立可以發佈的靜態檔案 hugo // 建立 local 端 server 連同草稿 hugo server --buildDrafts  Hugo 官網說明文件 https://gohugo.</description>
    </item>
    
  </channel>
</rss>