[
{
	"uri": "https://masonchu.github.io/golang/",
	"title": "golang 開發心得",
	"tags": [],
	"description": "",
	"content": " 2017 跳脫\u0008待了 9 年的 .net 開發環境，一方面是想要挑戰自己能接觸到更多的系統架構。另一方面也是受夠了在 mac \u0008裡面安裝 parallels，去處理開發環境限定 windows 的問題。\u0008\n 結果這幾年微軟新 CEO 就做了不少改變，\u0008更開放也更接觸 open source，\u0008開發跟部屬環境對非 windows \u0008的支援也更全面。\u0008\u0008我個人對於微軟這次的改變真的是非常欣賞，終於處理了 windows / office 派系問題走向開放。事實也證明結果並沒有讓微軟失去領先地位，而是藉著\u0008開發社群 \u0026amp; 雲端創造更多收益。\n \u0008為什麼選擇 golang 以往都是 C# 的經驗為主，自然在挑選的時候以強型別/編譯式語言為主。大部分數據分析也顯示 go 在執行效能上比 java / C# 更高一個層級。\n環境部署原來可以這麼容易 可以不用安裝 .net framework，專案編譯完打包居然丟上去 server 就可以跑。而且只要一個檔案。\u0008相對應也節省下了 devops \u0008設定 CI/CD 的繁瑣程度，尤其是當編譯出來檔案需要發佈到多台\u0008機器運行環境上的時候。\n 在 docker 火熱的今天，假設開發後專案\u0008都打包成 docker 才做發佈的動作，\u0008其實就\u0008\u0008一樣享有 go 發佈的好處，可以執行於多種運行環境，而且只需要一個二進制檔案\u0008就可以上傳到多組環境。\n 建置速度超快 用 go 開發的\u0008專案好多 可以在 github 看到各種\u0008套件 / 工具都是用\u0008熟悉的語言開發，這真的是一種很讓人開心的事\u0008，雖然\u0008 90% 的情況下都不會點進去看。但是好像自己也看得懂的那種感覺，真的要體會才知道。\n最難以適應的部分 找不到相對應的套件 一開始開發還是使用 web api 的模式，\u0008\u0008這時候找習慣的對應套件並不是那麼容易，也沒有一套真正主流的 framework。當看到套件控管的部分，dep / vgo / go vendor 還有一堆\u0008\u0008，各家大神也都擁護不同的工具，真的會有一種無所適從的感覺。\n"
},
{
	"uri": "https://masonchu.github.io/microservices/",
	"title": "開始微服務架構",
	"tags": [],
	"description": "",
	"content": " 前置作業 \u0008開始進行 microservices \u0008至少要具備的基本建設。\u0008\n開發相關配置  服務發現 service discovery\n k8s etcd consul zookeeper Netflix/eureka  事件訊息\u0008(非同步訊息) event sourcing messaging  kafka NSQ  訊息傳遞(\u0008同步訊息) transport  grpc thrift http  系統監控 monitor\n metrics Prometheus Grafana  \u0008斷路器 Circuit Breaker 紀錄追蹤 Log Tracking  opentracing zipkin Elasticsearch Stackdriver  Auth  Devops  CI / CD Docker k8s  golang 相關套件  go-kit https://github.com/go-kit/kit go-micro https://github.com/micro/go-micro gizmo https://github.com/nytimes/gizmo rpcx https://github.com/smallnest/rpcx  造成延伸問題 microservices solve organizational problems\nmicroservices cause technical problems\nref Go + Microservices = Go Kit [I] - Peter Bourgon, Go Kit https://www.youtube.com/watch?v=NX0sHF8ZZgw\n微服務基礎建設 - Service Discovery http://columns.chicken-house.net/2017/12/31/microservice9-servicediscovery/ \u0008\n"
},
{
	"uri": "https://masonchu.github.io/golang/gvm-go-version/",
	"title": "使用 GVM 管理 go 版本",
	"tags": ["golang"],
	"description": "",
	"content": " 基本介紹 GVM 是一套管理 golang 版本的套件，類似於 nodeJS / nvm。\u0008\u0008\n\u0008安裝 GVM bash \u0026lt; \u0026lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)  安裝之後應該會在 bashrc \u0008下加入 source \u0008的指令，\u0008如果安裝完還是找不到 gvm \u0008指令就需要檢查一下這塊。\nsource \u0026quot;/Users/\u0008\u0026lt;username\u0026gt;/.gvm/scripts/gvm\u0026quot;  \u0008首次使用 GVM 使用 GVM 安裝 Go1.4 與之後版本。go1.4 版本之後\u0008使用 go \u0008對自己編譯，\u0008因此沒有安裝 go 的狀況下之後的版本都是無法編譯的。\ngvm install go1.4 --binary # 直接安裝 binary gvm use go1.4 # 使用 go1.4 的環境 export GOROOTBOOTSTRAP=$GOROOT # 設定 $GOROOTBOOTSTRAP gvm install go1.10.3 # 安裝 Go go1.10.3 Installing go1.10.3...  gvm install go1.4 --binary gvm use go1.4 export GOROOTBOOTSTRAP=$GOROOT gvm install go1.10.3  常用指令 gvm list\t- 列出全部已經安裝的版本 gvm listall\t- \u0008列出線上可安裝版本 gvm use\t- \u0008切換使用特定版本  ref https://github.com/moovweb/gvm\nhttps://blog.longwin.com.tw/2016/11/golang-gvm-go-version-manager-install-2016/\n"
},
{
	"uri": "https://masonchu.github.io/kubernetes/install-minikube-locally/",
	"title": "在本機安裝 Minikube",
	"tags": [],
	"description": "",
	"content": " minikube 是 kubernetes 社群推出的的一個輕量型工具，用於在本地端建置模擬 kubernetes 功能。minikube 支援以下幾種 vm driver。\n virtualbox\u0008(預設值) vmwarefusion kvm2 kvm hyperkit   後續內容預設使用 macOS + virtualbox\u0008。\n 安裝 VM 安裝 kubectl brew install kubernetes-cli  \u0008確定安裝版本\nkubectl version   如果還沒有啟動 Minikube 這時候會出現 The connection to the server localhost:8080 was refused 的訊息。\n 安裝 Minikube curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.0/minikube-darwin-amd64 \u0026amp;\u0026amp; chmod +x minikube \u0026amp;\u0026amp; sudo mv minikube /usr/local/bin/  也可以使用 homebrew 安裝\nbrew cask install minikube  啟動 Minikube minikube start   如果是第一次啟動，這時候會自動下載 Minikube ISO \u0026amp; kubelet \u0026amp; kubeadm\n 啟動 Minikube 儀表板 minikube dashboard  部署到 Docker Image Minikube 用 echoserver 建立一個測試 deploy\nkubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080  將資源暴露為新的 Kubernetes Service\nkubectl expose deployment hello-minikube --type=NodePort  這時候可以取得 service url，從 url 就可以看到 service 回應。\nminikube service hello-minikube --url  這並不代表 service 這樣做就可以對外公開，而是只有在 minikube 上面本機檢視。 -- ref https://kubernetes.io/docs/setup/minikube/#minikube-features\n"
},
{
	"uri": "https://masonchu.github.io/microservices/install-and-start-nsq/",
	"title": "安裝和啟用 NSQ 服務",
	"tags": ["microservice"],
	"description": "",
	"content": " \u0008安裝 NSQ \u0008在本機測試環境 \u0008NSQ 本身有提供 brew / docker \u0008版本。在這邊我是直接使用 github 原始碼下載\u0008\u0008編譯，\u0008注意 golang 1.7+ \u0008並且已經有 dep \u0008套件管理。在 test.sh \u0008\u0008會執行 golang test \u0026amp; 編譯出所有的可執行檔。\n下載 source code \u0026amp; 安裝相依性套件 git clone https://github.com/nsqio/nsq $GOPATH/src/github.com/nsqio/nsq cd $GOPATH/src/github.com/nsqio/nsq dep ensure  測試 \u0026amp; 編譯 ./test.sh  安裝 NSQ 安裝至 /usr/local/bin 目錄\nmake install  依序啟動服務 \u0008nsqlookupd 預設監聽 http:4161 / tcp:4160\u0008，而 nsqd 啟動時自動到 \u0008nsqlookupd 註冊。\nnsqlookupd nsqd --lookupd-tcp-address=127.0.0.1:4160 nsqadmin --lookupd-http-address=127.0.0.1:4161  \u0008使用 go-nsq \u0008發布與接受訊息 發佈\u0008環境配置 使用在 microservices \u0008中時候，\u0008nsqd 建議並不是全部 services 共用，\u0008而是個別配置一個 localhost 的 nsqd \u0008註冊到 nsqlookupd。\n在 nsq gitlab issue 中提到，建議在每個 node 都部署\u0008一個 nsqd 再註冊到一台或多台的 nsqlookup 中，這樣各自的 service 生產的訊息就通一推到各自的 localhost，再由 nsqd 處理訊息這一段。\n\u0026gt; You may have your nsqds and nsqlookupds segregated so that all nodes are good candidates (we do this also), but this isn\u0026rsquo;t a requirement. nsqlookupd can handle several nsqd \u0026ldquo;clusters\u0026rdquo; with distinct responsibilities, like a service discovery service.\n When you get the nodes back you\u0026rsquo;ll have to make a decision about which node you want to publish to. In our setup we either publish to localhost if nsqd is on the same box or a VIP.\n ref https://nsq.io/deployment/production.html\nhttps://github.com/nsqio/go-nsq/issues/170\nhttps://segmentfault.com/a/1190000009194607\n"
},
{
	"uri": "https://masonchu.github.io/golang/golang-cobra/",
	"title": "Cobra 強大的 Golang 命令列工具",
	"tags": ["microservice"],
	"description": "",
	"content": " 基本介紹 Cobra 是一套可以快速可以快速建立 golang CLI 工具的套件。在 golang 的生態圈內到處都可以看到相關的痕跡\u0008。最有名的包含 docker, k8s 都使用 cobra 處理 CLI 介面。\n\u0008使用方法 \u0008安裝 如果已經準備好 go 的環境，只需要執行 go get 就可以將 cobra \u0008加入安裝。\ngo get -u github.com/spf13/cobra/cobra  \u0008建立根命令 cobra init   注意如果目錄下已經有檔案會出現 Cobra will not create a new project in a non empty directory，這時候新開目錄建立之後把全部資料移過來就可以。\u0008（需要修改 main.go import 路徑）\n 應該會建立以下檔案 + cmd\nroot.go + main.go\npackage main func main() { cmd.Execute() }  這時候只要執行 go run main.go 就會顯示 cobra 預設的 CLI 指令。\nA longer description that spans multiple lines and likely contains examples and usage of using your application. For example: Cobra is a CLI library for Go that empowers applications. This application is a tool to generate the needed files to quickly create a Cobra application.  \u0008加入額外命令 cobra add \u0026lt;command name\u0026gt;  \u0008使用外部參數 預設使用 viper 套件處理環境變數。\nref https://github.com/spf13/cobra\n"
},
{
	"uri": "https://masonchu.github.io/devops/first-hugo/",
	"title": "第一次使用 Hugo 就上手",
	"tags": ["hugo"],
	"description": "",
	"content": " 基本介紹 Hugo 是一套生成靜態頁面的工具(static site generator)。\u0008利用 Markdown 將內容跟樣式外觀完整分開\u0008，再利用生成的靜態網頁直接發佈到 server 上。般來說 markdown \u0008語法對應樣式種類會比較少，\u0008但是相對的也是幫助在寫作的時候專注在內容而不是樣式上。\n與動態的 blog 平台比較 優點  \u0008\u0008很容易對文章內容進行 \u0008git 版控\u0008或是多人協作\n 生成的靜態網頁瀏覽速度很快，\u0008也不需要對 server \u0008系統依賴\n 容易互相在\u0008同類型的\u0008靜態生成工具之間轉換，\u0008只要把 markdown 的文章內容帶著走就好了\n  缺點  需要熟悉 markdown , git\n \u0008通常不會有線上編輯模式或是管理平台\n 如果想要取得流量或讀者留言需要註冊其他服務  \u0008第一次安裝 \u0008如果是 mac OS 只要執行\nbrew install hugo  \u0008就可以直接安裝完成，之後進入選定好\u0008儲存檔案的目錄下\nhugo new site \u0008\u0026lt;SiteName\u0026gt;  \u0008就會建立出預設的檔案目錄\n建議第一篇 post hugo new post/my-first-post.md  建立後的 md 檔案產生在 content/post 目錄\n選擇\u0008 \u0008Theme 挑選寫作工具 常用指令 \u0008\u0008//\u0008 建立\u0008可以發佈的靜態檔案 hugo // 建立 local 端 server 連同草稿 hugo server --buildDrafts  Hugo 官網說明文件 \u0008https://gohugo.io/overview/quickstart/\n"
},
{
	"uri": "https://masonchu.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://masonchu.github.io/tags/golang/",
	"title": "Golang",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://masonchu.github.io/",
	"title": "Home",
	"tags": [],
	"description": "List the child pages of a page",
	"content": "  golang 開發心得  2017 跳脫\u0008待了 9 年的 .net 開發環境，一方面是想要挑戰自己能接觸到更多的系統架構。另一方面也是受夠了在 mac \u0008裡面安裝 parallels，去處理開發環境限定 windows 的問題。\u0008 結果這幾年微軟新 CEO 就做了不少改變，\u0008更開放也更接觸 open source，\u0008開發跟部屬環境對非 windows \u0008的支援也更全面。\u0008\u0008我個人對於微軟這次的改變真的是非常欣賞，終於處理了 windows / office 派系問題走向開放。事實也證明結果並沒有讓微軟失去領先地位，而是藉著\u0008開發社群 \u0026amp; 雲端創造更多收益。 \u0008為什麼選擇 golang 以往都是 C# 的經驗為主，自然在挑選的時候以強型別/編譯式語言為主。大部分數據分析也顯示 go 在執行效能上比 java / C# 更高一個層級。 環境部署原來可以這麼容易 可以不用安裝 .net framework，專案編譯完打包居然丟上去 server 就可以跑。而且只要一個檔案。\u0008相對應也節省下了 devops \u0008設定 CI/CD 的繁瑣程度，尤其是當編譯出來檔案需要發佈到多台\u0008機器運行環境上的時候。 在 docker 火熱的今天，假設開發後專案\u0008都打包成 docker 才做發佈的動作，\u0008其實就\u0008\u0008一樣享有 go 發佈的好處，可以執行於多種運行環境，而且只需要一個二進制檔案\u0008就可以上傳到多組環境。 建置速度超快 用 go 開發的\u0008專案好多 可以在 github 看到各種\u0008套件 / 工具都是用\u0008熟悉的語言開發，這真的是一種很讓人開心的事\u0008，雖然\u0008 90% 的情況下都不會點進去看。但是好像自己也看得懂的那種感覺，真的要體會才知道。 最難以適應的部分 找不到相對應的套件 一開始開發還是使用 web api 的模式，\u0008\u0008這時候找習慣的對應套件並不是那麼容易，也沒有一套真正主流的 framework。當看到套件控管的部分，dep / vgo / go vendor 還有一堆\u0008\u0008，各家大神也都擁護不同的工具，真的會有一種無所適從的感覺。\n 開始微服務架構  前置作業 \u0008開始進行 microservices \u0008至少要具備的基本建設。\u0008 開發相關配置 服務發現 service discovery k8s etcd consul zookeeper Netflix/eureka 事件訊息\u0008(非同步訊息) event sourcing messaging kafka NSQ 訊息傳遞(\u0008同步訊息) transport grpc thrift http 系統監控 monitor metrics Prometheus Grafana \u0008斷路器 Circuit Breaker 紀錄追蹤 Log Tracking opentracing zipkin Elasticsearch Stackdriver Auth Devops CI / CD Docker k8s golang 相關套件 go-kit https://github.com/go-kit/kit go-micro https://github.com/micro/go-micro gizmo https://github.com/nytimes/gizmo rpcx https://github.\n 使用 GVM 管理 go 版本  基本介紹 GVM 是一套管理 golang 版本的套件，類似於 nodeJS / nvm。\u0008\u0008 \u0008安裝 GVM bash \u0026lt; \u0026lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) 安裝之後應該會在 bashrc \u0008下加入 source \u0008的指令，\u0008如果安裝完還是找不到 gvm \u0008指令就需要檢查一下這塊。 source \u0026quot;/Users/\u0008\u0026lt;username\u0026gt;/.gvm/scripts/gvm\u0026quot; \u0008首次使用 GVM 使用 GVM 安裝 Go1.4 與之後版本。go1.4 版本之後\u0008使用 go \u0008對自己編譯，\u0008因此沒有安裝 go 的狀況下之後的版本都是無法編譯的。 gvm install go1.4 --binary # 直接安裝 binary gvm use go1.4 # 使用 go1.4 的環境 export GOROOTBOOTSTRAP=$GOROOT # 設定 $GOROOTBOOTSTRAP gvm install go1.10.3 # 安裝 Go go1.10.3 Installing go1.10.3... gvm install go1.\n 在本機安裝 Minikube  minikube 是 kubernetes 社群推出的的一個輕量型工具，用於在本地端建置模擬 kubernetes 功能。minikube 支援以下幾種 vm driver。 virtualbox\u0008(預設值) vmwarefusion kvm2 kvm hyperkit 後續內容預設使用 macOS + virtualbox\u0008。 安裝 VM 安裝 kubectl brew install kubernetes-cli \u0008確定安裝版本 kubectl version 如果還沒有啟動 Minikube 這時候會出現 The connection to the server localhost:8080 was refused 的訊息。 安裝 Minikube curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.0/minikube-darwin-amd64 \u0026amp;\u0026amp; chmod +x minikube \u0026amp;\u0026amp; sudo mv minikube /usr/local/bin/ 也可以使用 homebrew 安裝 brew cask install minikube 啟動 Minikube minikube start 如果是第一次啟動，這時候會自動下載 Minikube ISO \u0026amp; kubelet \u0026amp; kubeadm\n 安裝和啟用 NSQ 服務  \u0008安裝 NSQ \u0008在本機測試環境 \u0008NSQ 本身有提供 brew / docker \u0008版本。在這邊我是直接使用 github 原始碼下載\u0008\u0008編譯，\u0008注意 golang 1.7+ \u0008並且已經有 dep \u0008套件管理。在 test.sh \u0008\u0008會執行 golang test \u0026amp; 編譯出所有的可執行檔。 下載 source code \u0026amp; 安裝相依性套件 git clone https://github.com/nsqio/nsq $GOPATH/src/github.com/nsqio/nsq cd $GOPATH/src/github.com/nsqio/nsq dep ensure 測試 \u0026amp; 編譯 ./test.sh 安裝 NSQ 安裝至 /usr/local/bin 目錄 make install 依序啟動服務 \u0008nsqlookupd 預設監聽 http:4161 / tcp:4160\u0008，而 nsqd 啟動時自動到 \u0008nsqlookupd 註冊。 nsqlookupd nsqd --lookupd-tcp-address=127.0.0.1:4160 nsqadmin --lookupd-http-address=127.0.0.1:4161 \u0008使用 go-nsq \u0008發布與接受訊息 發佈\u0008環境配置 使用在 microservices \u0008中時候，\u0008nsqd 建議並不是全部 services 共用，\u0008而是個別配置一個 localhost 的 nsqd \u0008註冊到 nsqlookupd。\n Kubernetes  \n Cobra 強大的 Golang 命令列工具  基本介紹 Cobra 是一套可以快速可以快速建立 golang CLI 工具的套件。在 golang 的生態圈內到處都可以看到相關的痕跡\u0008。最有名的包含 docker, k8s 都使用 cobra 處理 CLI 介面。 \u0008使用方法 \u0008安裝 如果已經準備好 go 的環境，只需要執行 go get 就可以將 cobra \u0008加入安裝。 go get -u github.com/spf13/cobra/cobra \u0008建立根命令 cobra init 注意如果目錄下已經有檔案會出現 Cobra will not create a new project in a non empty directory，這時候新開目錄建立之後把全部資料移過來就可以。\u0008（需要修改 main.go import 路徑） 應該會建立以下檔案 + cmd root.go + main.go package main func main() { cmd.Execute() } 這時候只要執行 go run main.\n devops  還不知道怎麼分類\n 第一次使用 Hugo 就上手  基本介紹 Hugo 是一套生成靜態頁面的工具(static site generator)。\u0008利用 Markdown 將內容跟樣式外觀完整分開\u0008，再利用生成的靜態網頁直接發佈到 server 上。般來說 markdown \u0008語法對應樣式種類會比較少，\u0008但是相對的也是幫助在寫作的時候專注在內容而不是樣式上。 與動態的 blog 平台比較 優點 \u0008\u0008很容易對文章內容進行 \u0008git 版控\u0008或是多人協作 生成的靜態網頁瀏覽速度很快，\u0008也不需要對 server \u0008系統依賴 容易互相在\u0008同類型的\u0008靜態生成工具之間轉換，\u0008只要把 markdown 的文章內容帶著走就好了 缺點 需要熟悉 markdown , git \u0008通常不會有線上編輯模式或是管理平台 如果想要取得流量或讀者留言需要註冊其他服務 \u0008第一次安裝 \u0008如果是 mac OS 只要執行 brew install hugo \u0008就可以直接安裝完成，之後進入選定好\u0008儲存檔案的目錄下 hugo new site \u0008\u0026lt;SiteName\u0026gt; \u0008就會建立出預設的檔案目錄 建議第一篇 post hugo new post/my-first-post.md 建立後的 md 檔案產生在 content/post 目錄 選擇\u0008 \u0008Theme 挑選寫作工具 常用指令 \u0008\u0008//\u0008 建立\u0008可以發佈的靜態檔案 hugo // 建立 local 端 server 連同草稿 hugo server --buildDrafts Hugo 官網說明文件 \u0008https://gohugo.\n "
},
{
	"uri": "https://masonchu.github.io/tags/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://masonchu.github.io/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://masonchu.github.io/tags/microservice/",
	"title": "Microservice",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://masonchu.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://masonchu.github.io/devops/",
	"title": "devops",
	"tags": [],
	"description": "還不知道怎麼分類",
	"content": "  第一次使用 Hugo 就上手  基本介紹 Hugo 是一套生成靜態頁面的工具(static site generator)。\u0008利用 Markdown 將內容跟樣式外觀完整分開\u0008，再利用生成的靜態網頁直接發佈到 server 上。般來說 markdown \u0008語法對應樣式種類會比較少，\u0008但是相對的也是幫助在寫作的時候專注在內容而不是樣式上。 與動態的 blog 平台比較 優點 \u0008\u0008很容易對文章內容進行 \u0008git 版控\u0008或是多人協作 生成的靜態網頁瀏覽速度很快，\u0008也不需要對 server \u0008系統依賴 容易互相在\u0008同類型的\u0008靜態生成工具之間轉換，\u0008只要把 markdown 的文章內容帶著走就好了 缺點 需要熟悉 markdown , git \u0008通常不會有線上編輯模式或是管理平台 如果想要取得流量或讀者留言需要註冊其他服務 \u0008第一次安裝 \u0008如果是 mac OS 只要執行 brew install hugo \u0008就可以直接安裝完成，之後進入選定好\u0008儲存檔案的目錄下 hugo new site \u0008\u0026lt;SiteName\u0026gt; \u0008就會建立出預設的檔案目錄 建議第一篇 post hugo new post/my-first-post.md 建立後的 md 檔案產生在 content/post 目錄 選擇\u0008 \u0008Theme 挑選寫作工具 常用指令 \u0008\u0008//\u0008 建立\u0008可以發佈的靜態檔案 hugo // 建立 local 端 server 連同草稿 hugo server --buildDrafts Hugo 官網說明文件 \u0008https://gohugo.\n "
}]