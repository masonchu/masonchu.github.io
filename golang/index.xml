<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang 開發心得 on Mason Chu</title>
    <link>https://masonchu.github.io/golang/</link>
    <description>Recent content in golang 開發心得 on Mason Chu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Fri, 29 Jun 2018 11:05:04 +0800</lastBuildDate>
    
	<atom:link href="https://masonchu.github.io/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 GVM 管理 go 版本</title>
      <link>https://masonchu.github.io/golang/gvm-go-version/</link>
      <pubDate>Mon, 25 Jun 2018 14:54:21 +0800</pubDate>
      
      <guid>https://masonchu.github.io/golang/gvm-go-version/</guid>
      <description>基本介紹 GVM 是一套管理 golang 版本的套件，類似於 nodeJS / nvm。
安裝 GVM bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)  安裝之後應該會在 bashrc 下加入 source 的指令，如果安裝完還是找不到 gvm 指令就需要檢查一下這塊。
source &amp;quot;/Users/&amp;lt;username&amp;gt;/.gvm/scripts/gvm&amp;quot;  首次使用 GVM 使用 GVM 安裝 Go1.4 與之後版本。go1.4 版本之後使用 go 對自己編譯，因此沒有安裝 go 的狀況下之後的版本都是無法編譯的。
gvm install go1.4 --binary # 直接安裝 binary gvm use go1.4 # 使用 go1.4 的環境 export GOROOTBOOTSTRAP=$GOROOT # 設定 $GOROOTBOOTSTRAP gvm install go1.10.3 # 安裝 Go go1.10.3 Installing go1.10.3...  gvm install go1.</description>
    </item>
    
    <item>
      <title>從 dep 轉換到 vgo</title>
      <link>https://masonchu.github.io/golang/dep-to-vgo-issue/</link>
      <pubDate>Wed, 01 Aug 2018 15:48:37 +0800</pubDate>
      
      <guid>https://masonchu.github.io/golang/dep-to-vgo-issue/</guid>
      <description>在 go1.11 之後，vgo 會直接加入 go 官方套件管理工具，在正式釋出之前遇到一些小問題。
vscode gopkgs 支援 如果是使用 Microsoft/vscode-go 套件在 vscode 下開發的話，使用 vgo 之後移除 vendor 套件，會發現專案內 go import 出現找不到路徑的錯誤，這是由於 vscode-go 使用的 toolchain 還沒有更新的問題。立即的解法就是直接將 vscode 設定 go.alternateTools 直接改成 vgo 就可以了。
&amp;quot;go.alternateTools&amp;quot;: { &amp;quot;go&amp;quot;: &amp;quot;vgo&amp;quot; },  exec: &amp;ldquo;clang&amp;rdquo;: executable file not found in $PATH 使用 vgo 啟動出現這個錯誤的話，目前暫時使用
CGO_ENABLED=0 vgo build CC=gcc vgo build  ref http://www.evanlin.com/til-practical-in-vgo/
https://github.com/Microsoft/vscode-go/issues/1532
https://github.com/golang/go/issues/23965</description>
    </item>
    
    <item>
      <title>Cobra 強大的 Golang 命令列工具</title>
      <link>https://masonchu.github.io/golang/golang-cobra/</link>
      <pubDate>Wed, 27 Jun 2018 12:49:40 +0800</pubDate>
      
      <guid>https://masonchu.github.io/golang/golang-cobra/</guid>
      <description>基本介紹 Cobra 是一套可以快速可以快速建立 golang CLI 工具的套件。在 golang 的生態圈內到處都可以看到相關的痕跡。最有名的包含 docker, k8s 都使用 cobra 處理 CLI 介面。
使用方法 安裝 如果已經準備好 go 的環境，只需要執行 go get 就可以將 cobra 加入安裝。
go get -u github.com/spf13/cobra/cobra  建立根命令 cobra init   注意如果目錄下已經有檔案會出現 Cobra will not create a new project in a non empty directory，這時候新開目錄建立之後把全部資料移過來就可以。（需要修改 main.go import 路徑）
 應該會建立以下檔案 + cmd
root.go + main.go
package main func main() { cmd.Execute() }  這時候只要執行 go run main.</description>
    </item>
    
  </channel>
</rss>